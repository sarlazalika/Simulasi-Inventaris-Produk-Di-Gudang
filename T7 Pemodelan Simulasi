{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPylkKs07GpDJYVprd4ztJo"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":[],"metadata":{"id":"HjNpaFsRi7Yd"}},{"cell_type":"markdown","source":["Script Code Simulasi Inventaris Produk Di Gudang\n","\n","\n","\n","\n"],"metadata":{"id":"dkXWKPc5i8-K"}},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qxTjf0MjaNuo","executionInfo":{"status":"ok","timestamp":1730897831380,"user_tz":-420,"elapsed":16,"user":{"displayName":"Sarla Zalika","userId":"15108547163856285500"}},"outputId":"ae2e6c4c-d7c7-4eee-d91b-fa89bddc6563"},"outputs":[{"output_type":"stream","name":"stdout","text":["Rata-rata stok harian: 92.98 unit\n","Total biaya penyimpanan: Rp 46490000\n","Total biaya kekurangan stok: Rp 13029000\n","Total pesanan yang ditempatkan: 180\n"]}],"source":["import random\n","\n","# Parameter simulasi\n","DEMAND_MEAN = 50         # Rata-rata permintaan harian\n","DEMAND_STD_DEV = 10      # Standar deviasi permintaan\n","REORDER_POINT = 100      # Titik pemesanan ulang (stok minimum)\n","ORDER_QUANTITY = 200     # Jumlah stok dipesan saat pemesanan ulang\n","LEAD_TIME = 3            # Waktu pengiriman (hari)\n","SIMULATION_DAYS = 1000   # Total hari simulasi\n","\n","# Biaya\n","HOLDING_COST_PER_UNIT = 500  # Biaya penyimpanan per unit per hari\n","STOCKOUT_COST_PER_UNIT = 1000  # Biaya kekurangan stok per unit per hari\n","\n","# Statistik\n","total_holding_cost = 0\n","total_stockout_cost = 0\n","orders_placed = 0\n","stock_levels = []\n","\n","# Fungsi simulasi stok harian\n","def simulate_inventory():\n","    global total_holding_cost, total_stockout_cost, orders_placed\n","    stock = 200   # Stok awal\n","    incoming_order = 0  # Stok dipesan yang belum tiba\n","    lead_time_counter = 0  # Waktu tunggu pemesanan\n","\n","    for day in range(SIMULATION_DAYS):\n","        # Permintaan harian\n","        demand = max(0, int(random.gauss(DEMAND_MEAN, DEMAND_STD_DEV)))\n","\n","        # Mengurangi stok berdasarkan permintaan\n","        if stock >= demand:\n","            stock -= demand\n","        else:\n","            stockout_cost = (demand - stock) * STOCKOUT_COST_PER_UNIT\n","            total_stockout_cost += stockout_cost\n","            stock = 0  # Stok habis\n","\n","        # Menambahkan stok jika pesanan tiba\n","        if lead_time_counter > 0:\n","            lead_time_counter -= 1\n","        if lead_time_counter == 0 and incoming_order > 0:\n","            stock += incoming_order\n","            incoming_order = 0\n","\n","        # Biaya penyimpanan harian\n","        holding_cost = stock * HOLDING_COST_PER_UNIT\n","        total_holding_cost += holding_cost\n","        stock_levels.append(stock)\n","\n","        # Memesan ulang jika stok mencapai reorder point\n","        if stock <= REORDER_POINT and incoming_order == 0:\n","            incoming_order = ORDER_QUANTITY\n","            lead_time_counter = LEAD_TIME\n","            orders_placed += 1\n","\n","# Menjalankan simulasi\n","simulate_inventory()\n","\n","# Menghitung hasil\n","average_stock_level = sum(stock_levels) / len(stock_levels)\n","print(f\"Rata-rata stok harian: {average_stock_level:.2f} unit\")\n","print(f\"Total biaya penyimpanan: Rp {total_holding_cost}\")\n","print(f\"Total biaya kekurangan stok: Rp {total_stockout_cost}\")\n","print(f\"Total pesanan yang ditempatkan: {orders_placed}\")\n"]},{"cell_type":"markdown","source":["Simulasi ini akan memberikan rata-rata stok harian, total biaya penyimpanan, biaya kekurangan stok, dan jumlah pemesanan yang ditempatkan selama periode simulasi. Hasil ini dapat membantu dalam perencanaan inventaris yang lebih efisien."],"metadata":{"id":"xKkUytYXiyQ1"}}]}